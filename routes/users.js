const express = require("express");
const users = express.Router();

//Middleware
const protect = require("../middleware/authMiddleware");

//Functions from Controller
const registerUser = require("../controllers/userController").registerUser;
const loginUser = require("../controllers/userController").loginUser;
const getAllUsers = require("../controllers/userController").getAllUsers;
const getUserById = require("../controllers/userController").getUserById;
const registerInstructor = require("../controllers/userController")
  .registerInstructor;

/**
 * @swagger
 * components:
 *  schemas:
 *      User:
 *        type: object
 *        required:
 *          -id
 *          -firstName
 *          -lastName
 *          -userName
 *          -email
 *          -password
 *          -isInstructor
 *        properties:
 *          id:
 *             type: string
 *             description: Autogenerated ID by db
 *          firstName:
 *             type: string
 *             description: The first name of the user
 *          lastName:
 *             type: string
 *             description: The last name of the user
 *          userName:
 *             type: string
 *             description: The user's username
 *          email:
 *             type: string
 *             description: The user's email
 *          password:
 *             type: string
 *             description: the users email address
 *          isInstructor:
 *             type: boolean
 *             description: Determines if the usr is an instructor
 *          courses:
 *             type: Array
 *             description: The list of courses the user has created.
 *
 */
/**
 * @swagger
 * tags:
 *    name: Users
 *    description: Users routes
 */
/**
 * @swagger
 * /api/users/register:
 *      post:
 *        summary: Registers one user into the database
 *        tags: [Users]
 *        parameters:
 *          - in: body
 *            name: user
 *            description: The user information to add to database
 *            schema:
 *              type: object
 *              required:
 *                  -firstName
 *                  -lastName
 *                  -userName
 *                  -email
 *                  -password
 *              properties:
 *                 firstName:
 *                      type: string
 *                 lastName:
 *                      type: string
 *                 userName:
 *                      type: string
 *                 email:
 *                      type: string
 *                 password:
 *                      type: string
 *        responses:
 *          200:
 *            description: Successfully registered one into database.
 *          401:
 *            description: Something went wrong registering a user.
 *
 */
users.route("/register").post(registerUser);
/**
 * @swagger
 * /api/users/login:
 *      post:
 *        summary: Authenticates a user
 *        tags: [Users]
 *        parameters:
 *          - in: body
 *            name: user
 *            description: The users login information
 *            schema:
 *              type: object
 *              required:
 *                  -email
 *                  -password
 *              properties:
 *                 email:
 *                      type: string
 *                 password:
 *                      type: string
 *        responses:
 *          200:
 *            description: User successfully authenticated.
 *            content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      properties:
 *                          firstName:
 *                              type: string
 *                          lastName:
 *                              type: string
 *                          userName:
 *                              type: string
 *                          Token:
 *                              type: string
 *          401:
 *            description: Something went wrong registering a user.
 *          409:
 *            description: Incorrect username or password
 *
 */
users.route("/login").post(loginUser);
/**
 * @swagger
 * /api/users/all:
 *      get:
 *        summary: Returns all users in database
 *        tags: [Users]
 *        responses:
 *          200:
 *            description: An array of objects with user information
 *          401:
 *            description: An error occured getting the list of users.
 *
 */
users.route("/all").get(getAllUsers);
/**
 * @swagger
 * /api/users/user/{id}:
 *      get:
 *        summary: Returns one user that is found by the users id.
 *        tags: [Users]
 *        parameters:
 *         - in: header
 *           name: JSON Web Token
 *           type: string
 *           required: true
 *         - in: path
 *           name: id
 *           schema:
 *              type: string
 *              required: true
 *              description: the id of a user.
 *        responses:
 *          200:
 *            description: The information of one users returns
 *            contents:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/User'
 *
 *          404:
 *            description: User was not found.
 *          401:
 *            description: Not authorized.
 *
 */
users.route("/user/:id").get(protect, getUserById);
/**
 * @swagger
 * /api/users/instructor/register:
 *      post:
 *        summary: Registers one instructor into the database
 *        tags: [Users]
 *        parameters:
 *          - in: body
 *            name: user
 *            description: The user information to add to database
 *            schema:
 *              type: object
 *              required:
 *                  -firstName
 *                  -lastName
 *                  -userName
 *                  -email
 *                  -password
 *              properties:
 *                 firstName:
 *                      type: string
 *                 lastName:
 *                      type: string
 *                 userName:
 *                      type: string
 *                 email:
 *                      type: string
 *                 password:
 *                      type: string
 *        responses:
 *          200:
 *            description: Successfully registered one instructor into database.
 *          401:
 *            description: Something went wrong registering an instructor.
 *
 */
users.route("/instructor/register").post(registerInstructor);

module.exports = users;
